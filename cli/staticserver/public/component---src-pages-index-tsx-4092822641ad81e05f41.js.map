{"version":3,"file":"component---src-pages-index-tsx-4092822641ad81e05f41.js","mappings":"mPASA,MACMA,EAAqB,GAErBC,EAA0B,CAC9B,CACE,KAAQ,sBACR,MAAS,mPAEX,CACE,KAAQ,gBACR,MAAS,+XAEX,CACE,KAAQ,sBACR,MAAS,gJAEX,CACE,KAAQ,sBACR,MAAS,2DAEX,CACE,KAAQ,sBACR,MAAS,0EAEX,CACE,KAAQ,sBACR,MAAS,gGAEX,CACE,KAAQ,gBACR,MAAS,mHAEX,CACE,KAAQ,sBACR,MAAS,+BAEX,CACE,KAAQ,gBACR,MAAS,yFAEX,CACE,KAAQ,sBACR,MAAS,4CAEX,CACE,KAAQ,mBACR,MAAS,KAEX,CACE,KAAQ,sBACR,MAAS,kJAEX,CACE,KAAQ,sBACR,MAAS,mJAKPC,EAAmB,CACvBC,GAAI,GACJC,KAAM,GACNC,YAAa,GACbC,gBAAiB,GACjBC,QAAS,CACP,CACEJ,GAAI,GACJC,KAAM,GACNC,YAAa,GACbJ,QAASA,KAMA,SAASO,IACtB,MAAM,EAACC,EAAI,EAAEC,IAAWC,EAAAA,EAAAA,UAAkB,SACpC,EAACC,EAAkB,EAAEC,IAAyBF,EAAAA,EAAAA,UAAS,IAG7DG,EAAAA,EAAAA,YAAU,KACRD,EAAsB,GACtBH,EAAQ,OAAO,GACd,KAGHI,EAAAA,EAAAA,YAAU,KACR,GAAa,SAATL,EACF,OAEF,MAAMM,EAAiBC,IACP,eAAVA,EAAEC,KAAwBL,EAAqBX,EAAQiB,OAAS,GAClEC,QAAQC,IAAI,wBACZP,EAAsBD,EAAqB,IACxB,cAAVI,EAAEC,KAAuBL,EAAqB,GACvDO,QAAQC,IAAI,4BACZP,EAAsBD,EAAqB,IACxB,MAAVI,EAAEC,MACXE,QAAQC,IAAI,yBAEZP,EAAsB,GACtBH,EAAQ,UACV,EAGF,OADAW,OAAOC,iBAAiB,UAAWP,GAC5B,KACLM,OAAOE,oBAAoB,UAAWR,EAAc,CACrD,GACA,CAACN,EAAMG,IAWV,OACEY,EAAAA,cAACC,EAAAA,GAAK,CACJC,YAAY,OACZC,WAAW,OACXC,gBAAgB,cAChBC,OAAO,SAEPL,EAAAA,cAACM,EAAAA,EAAI,CAACC,UAAU,SAASC,QAAQ,SAASC,MAAM,UAC9CT,EAAAA,cAACU,EAAAA,EAAG,CACFC,MAAO,CACLC,OAAQ,QACRC,MAAO,UAGTb,EAAAA,cAACc,EAAAA,EAAY,CACXC,MAAM,OACNrC,QAASA,EACTO,KAAMA,EACN+B,oBAAoB,EACpBC,gBAAiB,SACjBC,yBAA0B,KAC1B9B,mBAAoBA,EACpB+B,mBAAoB,EACpBC,WAAW,EACXC,cAAc,EACdC,uBAhCa,KACjBlC,EAAqBX,EAAQiB,OAAS,GACxCL,EAAsBD,EAAqB,EAC7C,EA8BQZ,kBAAmBA,EACnB+C,kBAAmB,IACnBC,eAAgB,IAChBC,WAAW,QACXC,yBAA0B,WAMtC,C","sources":["webpack://codevideo-ide-react-examples/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { GUIMode, IAction, Project, IAudioItem } from \"@fullstackcraftllc/codevideo-types\"\n// actual package import\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\n// local import from src below - doesn't seem to work because of relative path issues\n// import { CodeVideoIDE } from \"../../../src/CodeVideoIDE\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\nconst audios: Array<IAudioItem> = []\nconst speakActionAudios =  [];\n\nconst actions: Array<IAction> = [\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Hi guys, Chris here again with another CodeVideo update! We've just added slideshow support within the CodeVideo ecosystem! You can show a slide by using the 'slide-display' action and specifying the slide's content with markdown, like so:\"\n  },\n  {\n    \"name\": \"slide-display\",\n    \"value\": \"# This is a slide!\\n\\n## And this is a subheading\\n\\n- This is a bullet point\\n- This is another bullet point\\n- This is a third bullet point\\n\\nAnd this is some text below the bullet points.\\n\\n```typescript\\nexport interface MyInterface {\\n    name: string;\\n    age: number;\\n}\\n```\\n\\nAnd that ^ is a TypeScript code block! We can also render `inline code` and emojis ðŸ˜Ž.\\n\\n\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"You can see out of the box that we support headings, bullet points, and code blocks! In fact, any valid markdown will work for these slides.\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"I can keep talking on the same slide as much as I want.\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"The slide won't change until we do a non-speaking or non-slide action.\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Alright, let's go on to the next slide by issuing 'slide-display' with new markdown content!\"\n  },\n  {\n    \"name\": \"slide-display\",\n    \"value\": \"# This is the NEXT slide!\\n\\nWow, CodeVideoâ„¢ is great! Maybe we should just start calling it EducationalVideoâ„¢!\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Let's go to the next slide!\"\n  },\n  {\n    \"name\": \"slide-display\",\n    \"value\": \"# Here's a final third slide\\n\\nthis is the last slide :( I'm sad to see it end... :(\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Alright, let's get back into the editor.\"\n  },\n  {\n    \"name\": \"mouse-left-click\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"All I did to hide the slide was issue the 'mouse-left-click' action - this is an editor related action, so the slides will no longer be shown.\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"That's it for this new feature! I hope you enjoy it, and I can't wait to see what you create with CodeVideo! Until next time, cheers everyone!\"\n  },\n];\n\n// TODO: actually none of these other strings affect the project... so?????\nconst project: Project = {\n  id: '',\n  name: '',\n  description: '',\n  primaryLanguage: '',\n  lessons: [\n    {\n      id: '',\n      name: '',\n      description: '',\n      actions: actions\n    }\n  ]\n};\n\n// same as step for now - probably should become more universal example\nexport default function Home() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n\n  // on mount, ensure that currentActionIndex is set to 0\n  useEffect(() => {\n    setCurrentActionIndex(0)\n    setMode('step')\n  }, [])\n\n  // on mount, setup event listeners for left and right arrow keys - to navigate between actions\n  useEffect(() => {\n    if (mode !== 'step') {\n      return\n    }\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowRight' && currentActionIndex < actions.length - 1) {\n        console.log('going to next action')\n        setCurrentActionIndex(currentActionIndex + 1)\n      } else if (e.key === 'ArrowLeft' && currentActionIndex > 0) {\n        console.log('going to previous action')\n        setCurrentActionIndex(currentActionIndex - 1)\n      } else if (e.key === ' ') {\n        console.log('replaying mode active')\n        // reset actions to 0 and set mode to replay\n        setCurrentActionIndex(0)\n        setMode('replay')\n      }\n    }\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [mode, currentActionIndex])\n\n\n\n  const goToNextAction = () => {\n    if (currentActionIndex < actions.length - 1) {\n      setCurrentActionIndex(currentActionIndex + 1)\n    }\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            theme='dark'\n            project={project}\n            mode={mode}\n            allowFocusInEditor={false}\n            defaultLanguage={'python'}\n            isExternalBrowserStepUrl={null}\n            currentActionIndex={currentActionIndex}\n            currentLessonIndex={0}\n            isSoundOn={true}\n            withCaptions={true}\n            actionFinishedCallback={goToNextAction}\n            speakActionAudios={speakActionAudios}\n            fileExplorerWidth={400}\n            terminalHeight={250}\n            mouseColor=\"black\" \n            playBackCompleteCallback={() => {}}\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["speakActionAudios","actions","project","id","name","description","primaryLanguage","lessons","Home","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","useEffect","handleKeyDown","e","key","length","console","log","window","addEventListener","removeEventListener","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","theme","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","currentLessonIndex","isSoundOn","withCaptions","actionFinishedCallback","fileExplorerWidth","terminalHeight","mouseColor","playBackCompleteCallback"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-v-3-tsx-de175984eb4056ab9ba0.js","mappings":"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","sources":["webpack://codevideo-ide-react-examples/./src/pages/v3.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { extractActionsFromProject, GUIMode, IAction, IAudioItem, ICodeVideoManifest, Project } from \"@fullstackcraftllc/codevideo-types\"\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\n// this example is nearly the same as the record example, but with some puppeteer window injections\n// it also loads the manifest from the CodeVideo API running at localhost:7000\n// this is the static page used by the codevideo-cli\nexport default function Puppeteer() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n  const [project, setProject] = useState<Project>([])\n  const [actions, setActions] = useState<IAction[]>([])\n  const [currentLessonIndex, setCurrentLessonIndex] = useState<number | null>(null)\n  const [audioItems, setAudioItems] = useState<Array<IAudioItem>>([])\n  const [isSoundOn, setIsSoundOn] = useState<boolean>(false)\n  const [monacoLoaded, setMonacoLoaded] = useState<boolean>(false)\n\n  // on user interaction, set mode to 'replay' and reset the current action index\n  const [readyToReplay, setReadyToReplay] = useState(false)\n\n  // Expose the __startRecording function globally.\n  useEffect(() => {\n    (window as any).__startRecording = () => {\n      console.log(\"Recording triggered programmatically!\");\n      setReadyToReplay(true);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (readyToReplay && monacoLoaded) {\n      console.log('Starting replay...')\n      setCurrentActionIndex(0)\n      setMode('replay')\n      setIsSoundOn(true)\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: currentActionIndex,\n          totalActions: actions.length,\n          progress: 0,\n          actionName: actions[currentActionIndex]?.name || `Action ${currentActionIndex}`,\n          actionValue: actions[currentActionIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n  }, [readyToReplay, monacoLoaded])\n\n  // gets manifest from the CodeVideo API running at localhost:7000\n  const getManifest = async (uuid: string) => {\n    try {\n      const response = await fetch(`http://localhost:7000/get-manifest-v3?uuid=${uuid}`)\n      const data: ICodeVideoManifest = await response.json()\n      console.log(\"Manifest data: \", data)\n\n      // if data.actions is defined, set the actions\n      // let project: Project | undefined\n      // if (data && data.actions) {\n      //   project = data.actions\n      // } else if (data.lesson) {\n      //   project = data.lesson\n      // }\n\n      // if (data.currentLessonIndex !== undefined) {\n      //   setCurrentLessonIndex(data.currentLessonIndex)\n      // }\n\n      // const actions = extractActionsFromProject(project, data.currentLessonIndex)\n      setActions(data.actions || [])\n      setAudioItems(data.audioItems)\n    } catch (error) {\n      console.error(\"Error getting manifest: \", error)\n    }\n  }\n\n  // on mount, load uuid from \"uuid\" property in the url\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const uuid = urlParams.get('uuid')\n    if (uuid) {\n      console.log(\"Retrieving manifest for uuid: \", uuid)\n      getManifest(uuid)\n    }\n  }, [])\n\n  // to continue to next action in replay mode, you need to implementation a function for the actionFinishedCallback prop\n  const goToNextAction = () => {\n    console.log(\"Going to next action...\")\n    const nextIndex = currentActionIndex + 1\n    if (nextIndex < actions.length) {\n      // Send progress update - see scripts/make-video-from-record-page.js\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: nextIndex,\n          totalActions: actions.length,\n          progress: (nextIndex / actions.length * 100).toFixed(1),\n          actionName: actions[nextIndex]?.name || `Action ${nextIndex}`,\n          actionValue: actions[nextIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n    setCurrentActionIndex(nextIndex)\n  }\n\n  // when the video is complete, you need may want to implement a function for the playBackCompleteCallback prop\n  const playBackCompleteCallback = () => {\n    console.log(\"Playback complete!\")\n    // Send final progress update (the one with 100%) only once when the final action is reached this is actually when nextIndex === actions.length\n    if (typeof (window as any).__onActionProgress === 'function') {\n      (window as any).__onActionProgress({\n        currentAction: actions.length,\n        totalActions: actions.length,\n        progress: \"100.0\",\n        actionName: actions[actions.length - 1]?.name || `Action ${actions.length}`,\n        actionValue: actions[actions.length - 1]?.value || '',\n        timestamp: Date.now().toLocaleString()\n      });\n    }\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            theme='dark'\n            project={project}\n            // should be currentLessonIndex, but something seems broken\n            currentLessonIndex={0}\n            mode={mode}\n            allowFocusInEditor={false}\n            defaultLanguage={'python'}\n            isExternalBrowserStepUrl={null}\n            currentActionIndex={currentActionIndex}\n            isSoundOn={isSoundOn}\n            // if you're using CodeVideo to record a video for something like youtube, captions may not be a good idea\n            // if you're exporting a video to your own site, captions might be really nice!\n            // for this example, since the user gets directly in their email, captions are nice\n            withCaptions={true}\n            actionFinishedCallback={goToNextAction}\n            playBackCompleteCallback={playBackCompleteCallback}\n            // this example has audios! see codevideo-backend-engine, command: `npm run generate-audio-manifest <your actions json or ts file here> elevenlabs`\n            speakActionAudios={audioItems}\n            fileExplorerWidth={400}\n            terminalHeight={350}\n            mouseColor=\"black\"\n            fontSizePx={24}\n            monacoLoadedCallback={() => setMonacoLoaded(true)}\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["Puppeteer","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","project","setProject","actions","setActions","currentLessonIndex","setCurrentLessonIndex","audioItems","setAudioItems","isSoundOn","setIsSoundOn","monacoLoaded","setMonacoLoaded","readyToReplay","setReadyToReplay","useEffect","window","__startRecording","console","log","__onActionProgress","currentAction","totalActions","length","progress","actionName","_actions$currentActio","name","actionValue","_actions$currentActio2","value","timestamp","Date","now","toLocaleString","uuid","URLSearchParams","location","search","get","async","response","fetch","data","json","error","getManifest","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","theme","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","withCaptions","actionFinishedCallback","nextIndex","toFixed","_actions$nextIndex","_actions$nextIndex2","playBackCompleteCallback","_actions","_actions2","speakActionAudios","fileExplorerWidth","terminalHeight","mouseColor","fontSizePx","monacoLoadedCallback"],"sourceRoot":""}
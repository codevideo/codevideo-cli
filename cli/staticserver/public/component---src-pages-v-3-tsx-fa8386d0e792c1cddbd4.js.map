{"version":3,"file":"component---src-pages-v-3-tsx-fa8386d0e792c1cddbd4.js","mappings":"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","sources":["webpack://codevideo-ide-react-examples/./src/pages/v3.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { ICodeVideoIDEProps, GUIMode, IAction, IAudioItem, ICodeVideoManifest, Project, extractActionsFromProject } from \"@fullstackcraftllc/codevideo-types\"\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\n// this example is nearly the same as the record example, but with some puppeteer window injections\n// it also loads the manifest from the CodeVideo API running at localhost:7000\n// this is the static page used by the codevideo-cli\nexport default function Puppeteer() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n  const [project, setProject] = useState<Project>([])\n  const [actions, setActions] = useState<IAction[]>([])\n  // const [currentLessonIndex, setCurrentLessonIndex] = useState<number | null>(null)\n  const [audioItems, setAudioItems] = useState<Array<IAudioItem>>([])\n  const [isSoundOn, setIsSoundOn] = useState<boolean>(false)\n  const [monacoLoaded, setMonacoLoaded] = useState<boolean>(false)\n\n  // CodeVideoIDE props state with defaults\n  const [ideProps, setIdeProps] = useState<ICodeVideoIDEProps>({\n    project: [],\n    mode: 'step',\n    currentLessonIndex: 0,\n    currentActionIndex: 0,\n    isSoundOn: false,\n    actionFinishedCallback: () => {},\n    speakActionAudios: [],\n    theme: 'dark',\n    allowFocusInEditor: true,\n    defaultLanguage: 'python',\n    isExternalBrowserStepUrl: null,\n    withCaptions: true,\n    fileExplorerWidth: 400,\n    terminalHeight: 350,\n    mouseColor: \"black\",\n    fontSizePx: 26,\n    keyboardTypingPauseMs: 40,\n    standardPauseMs: 200,\n    longPauseMs: 200,\n    resolution: '1080p',\n    showDevBox: false,\n  })\n\n  // on user interaction, set mode to 'replay' and reset the current action index\n  const [readyToReplay, setReadyToReplay] = useState(false)\n\n  // Expose the __startRecording function globally.\n  // also log any error or unhandled rejection to the console\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      console.error(\"This code is intended to run in a browser environment.\");\n      return;\n    }\n    \n    (window as any).__startRecording = () => {\n      console.log(\"Recording triggered programmatically!\");\n      setReadyToReplay(true);\n    };\n\n    (window as any).addEventListener('error', (event) => {\n        console.error('Global error caught:', JSON.stringify({\n            message: event.message,\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno,\n            error: event.error?.stack\n        }));\n    });\n\n    (window as any).addEventListener('unhandledrejection', (event) => {\n        console.error('Unhandled promise rejection:', JSON.stringify(event));\n    });\n  }, []);\n\n  useEffect(() => {\n    if (readyToReplay && monacoLoaded) {\n      console.log('Starting replay...')\n      setCurrentActionIndex(0)\n      setMode('replay')\n      setIsSoundOn(true)\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: currentActionIndex,\n          totalActions: actions.length,\n          progress: 0,\n          actionName: actions[currentActionIndex]?.name || `Action ${currentActionIndex}`,\n          actionValue: actions[currentActionIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n  }, [readyToReplay, monacoLoaded])\n\n  // gets manifest from the CodeVideo API running at localhost:7000\n  const getManifest = async (uuid: string) => {\n    try {\n      const response = await fetch(`http://localhost:7000/get-manifest-v3?uuid=${uuid}`)\n      const data: ICodeVideoManifest = await response.json()\n      console.log(\"\\n-------------------\\n\\n\\nMANIFEST DATA:\\n\", JSON.stringify(data, null, 2), \"\\n\\n-------------------\\n\")\n\n      // if data.actions is defined, set the actions\n      let project: Project | undefined\n      if (data && data.actions) {\n        project = data.actions\n        console.log(`FOUND ${data.actions.length} actions in manifest`)\n        setActions(data.actions)\n      } else if (data.lesson) {\n        project = data.lesson\n        console.log(`FOUND ${data.lesson.actions.length} actions in lesson`)\n        setActions(data.lesson.actions)\n      }\n      setProject(project || [])\n      setAudioItems(data.audioItems)\n\n      // Apply codeVideoIDEProps from manifest if they exist\n      if (data.codeVideoIDEProps) {\n        setIdeProps(prevProps => ({\n          ...prevProps,\n          ...data.codeVideoIDEProps\n        }))\n      }\n    } catch (error) {\n      console.error(\"Error getting manifest: \", JSON.stringify(error));\n    }\n  }\n\n  // on mount, load uuid from \"uuid\" property in the url\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const uuid = urlParams.get('uuid')\n    if (uuid) {\n      console.log(\"Retrieving manifest for uuid: \", uuid)\n      getManifest(uuid)\n    }\n  }, [])\n\n  // NOTE HERE: to continue to the next action in replay mode, you need to implementation a function for the actionFinishedCallback prop\n  const goToNextAction = () => {\n    console.log(\"Going to next action...\")\n    const nextIndex = currentActionIndex + 1\n    if (nextIndex < actions.length) {\n      // Send progress update - see scripts/make-video-from-record-page.js\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: nextIndex,\n          totalActions: actions.length,\n          progress: (nextIndex / actions.length * 100).toFixed(1),\n          actionName: actions[nextIndex]?.name || `Action ${nextIndex}`,\n          actionValue: actions[nextIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n    setCurrentActionIndex(nextIndex)\n  }\n\n  // when the video is complete, you need may want to implement a function for the playBackCompleteCallback prop\n  const playBackCompleteCallback = () => {\n    console.log(\"Playback complete!\")\n    // Send final progress update (the one with 100%) only once when the final action is reached this is actually when nextIndex === actions.length\n    if (typeof (window as any).__onActionProgress === 'function') {\n      (window as any).__onActionProgress({\n        currentAction: actions.length,\n        totalActions: actions.length,\n        progress: \"100.0\",\n        actionName: actions[actions.length - 1]?.name || `Action ${actions.length}`,\n        actionValue: actions[actions.length - 1]?.value || '',\n        timestamp: Date.now().toLocaleString()\n      });\n    }\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            {...ideProps}\n            // should be project, but something seems broken - just use the actions for now\n            project={project}\n            // should be currentLessonIndex, but something seems broken\n            currentLessonIndex={0}\n            mode={mode}\n            currentActionIndex={currentActionIndex}\n            isSoundOn={isSoundOn}\n            actionFinishedCallback={goToNextAction}\n            playBackCompleteCallback={playBackCompleteCallback}\n            // this example has audios! see codevideo-backend-engine, command: `npm run generate-audio-manifest <your actions json or ts file here> elevenlabs`\n            speakActionAudios={audioItems}\n            monacoLoadedCallback={() => setMonacoLoaded(true)}\n            showDevBox={false} // set to 'true' to show a small dev box in the bottom left corner of the video\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["Puppeteer","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","project","setProject","actions","setActions","audioItems","setAudioItems","isSoundOn","setIsSoundOn","monacoLoaded","setMonacoLoaded","ideProps","setIdeProps","currentLessonIndex","actionFinishedCallback","speakActionAudios","theme","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","withCaptions","fileExplorerWidth","terminalHeight","mouseColor","fontSizePx","keyboardTypingPauseMs","standardPauseMs","longPauseMs","resolution","showDevBox","readyToReplay","setReadyToReplay","useEffect","window","__startRecording","console","log","addEventListener","event","error","JSON","stringify","message","filename","lineno","colno","_event$error","stack","__onActionProgress","currentAction","totalActions","length","progress","actionName","_actions$currentActio","name","actionValue","_actions$currentActio2","value","timestamp","Date","now","toLocaleString","uuid","URLSearchParams","location","search","get","async","response","fetch","data","json","lesson","codeVideoIDEProps","prevProps","getManifest","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","nextIndex","toFixed","_actions$nextIndex","_actions$nextIndex2","playBackCompleteCallback","_actions","_actions2","monacoLoadedCallback"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-puppeteer-tsx-f489362851e226084f68.js","mappings":"mPAOA,MAAMA,EAAgC,CACpC,CACE,KAAQ,+JACR,OAAU,2IAEZ,CACE,KAAQ,uDACR,OAAU,2IAEZ,CACE,KAAQ,2CACR,OAAU,2IAEZ,CACE,KAAQ,kGACR,OAAU,4IAIRC,EAA0B,CAC9B,CACE,KAAQ,sBACR,MAAS,gKAEX,CACE,KAAQ,4BACR,MAAS,eAEX,CACE,KAAQ,0BACR,MAAS,eAEX,CACE,KAAQ,cACR,MAAS,oBAEX,CACE,KAAQ,sBACR,MAAS,wDAEX,CACE,KAAQ,cACR,MAAS,sNAEX,CACE,KAAQ,sBACR,MAAS,4CAEX,CACE,KAAQ,cACR,MAAS,wFAEX,CACE,KAAQ,sBACR,MAAS,oGAKE,SAASC,IACtB,MAAM,EAACC,EAAI,EAAEC,IAAWC,EAAAA,EAAAA,UAAkB,SACpC,EAACC,EAAkB,EAAEC,IAAyBF,EAAAA,EAAAA,UAAS,IAGvD,EAACG,EAAc,EAAEC,IAAqBJ,EAAAA,EAAAA,WAAS,IAYrDK,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAoB,CAAC,QAAS,UAAW,cAEzCC,EAAoB,KAZrBJ,IACHD,EAAsB,GACtBH,EAAQ,UACRK,GAAkB,GASmC,EAQvD,OALAE,EAAkBE,SAAQC,IACxBC,SAASC,iBAAiBF,EAAOF,EAAmB,CAAEK,MAAM,GAAO,IAI9D,KACLN,EAAkBE,SAAQC,IACxBC,SAASG,oBAAoBJ,EAAOF,EAAkB,GACtD,CACH,GACA,CAACJ,IAoCJ,OACEW,EAAAA,cAACC,EAAAA,GAAK,CACJC,YAAY,OACZC,WAAW,OACXC,gBAAgB,cAChBC,OAAO,SAEPL,EAAAA,cAACM,EAAAA,EAAI,CAACC,UAAU,SAASC,QAAQ,SAASC,MAAM,UAC9CT,EAAAA,cAACU,EAAAA,EAAG,CACFC,MAAO,CACLC,OAAQ,QACRC,MAAO,UAGTb,EAAAA,cAACc,EAAAA,EAAY,CACXC,MAAM,OACNC,QAASlC,EACTE,KAAMA,EACNiC,oBAAoB,EACpBC,gBAAiB,SACjBC,yBAA0B,KAC1BhC,mBAAoBA,EACpBiC,mBAAoB,EACpBC,WAAW,EAIXC,cAAc,EACdC,uBA7Da,KACrB,MAAMC,EAAYrC,EAAqB,EAGyB,QAcA,IAhB5DqC,EAAY1C,EAAQ2C,SAE4B,mBAAtCC,OAAeC,oBACxBD,OAAeC,mBAAmB,CACjCC,cAAeJ,EACfK,aAAc/C,EAAQ2C,OACtBK,UAAWN,EAAY1C,EAAQ2C,OAAS,KAAKM,QAAQ,GACrDC,YAA8B,QAAlB,EAAAlD,EAAQ0C,UAAU,aAAlBS,EAAoBC,OAAI,UAAcV,EAClDW,aAA+B,QAAlB,EAAArD,EAAQ0C,UAAU,aAAlBY,EAAoBC,QAAS,GAC1CC,UAAWC,KAAKC,MAAMC,oBAMxBjB,IAAc1C,EAAQ2C,SAC0B,mBAAtCC,OAAeC,oBACxBD,OAAeC,mBAAmB,CACjCC,cAAe9C,EAAQ2C,OACvBI,aAAc/C,EAAQ2C,OACtBK,SAAU,QACVE,YAAuC,QAA3B,EAAAlD,EAAQA,EAAQ2C,OAAS,UAAE,aAA3BiB,EAA6BR,OAAI,UAAcpD,EAAQ2C,OACnEU,aAAwC,QAA3B,EAAArD,EAAQA,EAAQ2C,OAAS,UAAE,aAA3BkB,EAA6BN,QAAS,GACnDC,UAAWC,KAAKC,MAAMC,oBAI5BrD,EAAsBoC,EAAU,EAkCxBoB,kBAAmB/D,EACnBgE,kBAAmB,IACnBC,eAAgB,IAChBC,WAAW,QACXC,WAAY,OAMxB,C","sources":["webpack://codevideo-ide-react-examples/./src/pages/puppeteer.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { GUIMode, IAction, Project, IAudioItem } from \"@fullstackcraftllc/codevideo-types\"\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\n// currently, audio manifests can be generated from codevideo-backend-engine npm run generate-audio-manifest\nconst audioItems: Array<IAudioItem> = [\n  {\n    \"text\": \"Right now, we're just looking at a blank editor. We don't even have a file open yet! Let's begin by creating a TypeScript file for this 'areEqual' function.\",\n    \"mp3Url\": \"https://coffee-app.sfo2.cdn.digitaloceanspaces.com/codevideo/audio/3fc8d70f4676b4f5984b85c34a7f273fc72a29fc39ceda594e5284bc67b7c594.mp3\"\n  },\n  {\n    \"text\": \"Let's first write a JS doc comment for our function:\",\n    \"mp3Url\": \"https://coffee-app.sfo2.cdn.digitaloceanspaces.com/codevideo/audio/6fd64043adaaa45a60fa6d95dace98cd71db4b82d869e95b4cbef5317d2e0d47.mp3\"\n  },\n  {\n    \"text\": \"Now let's implement the actual function:\",\n    \"mp3Url\": \"https://coffee-app.sfo2.cdn.digitaloceanspaces.com/codevideo/audio/715b505c019f626596cd310c49cf3f6fb37a2a9427ab1cdceaa99daa5c3f76c8.mp3\"\n  },\n  {\n    \"text\": \"That should be all we need to do for this 'areEqual' function. I hope you enjoyed the lesson!!!\",\n    \"mp3Url\": \"https://coffee-app.sfo2.cdn.digitaloceanspaces.com/codevideo/audio/25caae0805190bdfe8e6db5aa00eddd9c1f4e5ca71e0367d0e805143e65fb249.mp3\"\n  }\n]\n\nconst actions: Array<IAction> = [\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Right now, we're just looking at a blank editor. We don't even have a file open yet! Let's begin by creating a TypeScript file for this 'areEqual' function.\"\n  },\n  {\n    \"name\": \"file-explorer-create-file\",\n    \"value\": \"areEqual.ts\"\n  },\n  {\n    \"name\": \"file-explorer-open-file\",\n    \"value\": \"areEqual.ts\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"// areEqual.ts\\n\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Let's first write a JS doc comment for our function:\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"/**\\n* Compares two numbers for strict equality.\\n*\\n* @param a - The first number to compare\\n* @param b - The second number to compare\\n* @returns true if the numbers are strictly equal, false otherwise\\n*/\\n\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"Now let's implement the actual function:\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"export const areEqual = (a: number, b: number): boolean => {\\n    return a === b;\\n}\"\n  },\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"That should be all we need to do for this 'areEqual' function. I hope you enjoyed the lesson!!!\"\n  }\n]\n\n// this example is nearly the same as the record example, but with some puppeteer window injections\nexport default function Puppeteer() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n\n  // on user interaction, set mode to 'replay' and reset the current action index\n  const [userInteracted, setUserInteracted] = useState(false)\n\n  // Handle user interaction\n  const handleUserInteraction = () => {\n    if (!userInteracted) {\n      setCurrentActionIndex(0)\n      setMode('replay')\n      setUserInteracted(true)\n    }\n  }\n\n  // Set up event listeners for user interaction\n  useEffect(() => {\n    // Common user interaction events\n    const interactionEvents = ['click', 'keydown', 'touchstart']\n\n    const handleInteraction = () => handleUserInteraction()\n\n    // Add event listeners\n    interactionEvents.forEach(event => {\n      document.addEventListener(event, handleInteraction, { once: true })\n    })\n\n    // Clean up\n    return () => {\n      interactionEvents.forEach(event => {\n        document.removeEventListener(event, handleInteraction)\n      })\n    }\n  }, [userInteracted])\n\n  // to continue to next action in replay mode, you need to implementation a function for the actionFinishedCallback prop\n  const goToNextAction = () => {\n    const nextIndex = currentActionIndex + 1\n    if (nextIndex < actions.length) {\n      // Send progress update - see scripts/make-video-from-record-page.js\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: nextIndex,\n          totalActions: actions.length,\n          progress: (nextIndex / actions.length * 100).toFixed(1),\n          actionName: actions[nextIndex]?.name || `Action ${nextIndex}`,\n          actionValue: actions[nextIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n\n    // Send final progress update (the one with 100%) only once when the final action is reached this is actually when nextIndex === actions.length\n    if (nextIndex === actions.length) {\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: actions.length,\n          totalActions: actions.length,\n          progress: \"100.0\",\n          actionName: actions[actions.length - 1]?.name || `Action ${actions.length}`,\n          actionValue: actions[actions.length - 1]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n    setCurrentActionIndex(nextIndex)\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            theme='dark'\n            project={actions}\n            mode={mode}\n            allowFocusInEditor={false}\n            defaultLanguage={'python'}\n            isExternalBrowserStepUrl={null}\n            currentActionIndex={currentActionIndex}\n            currentLessonIndex={0}\n            isSoundOn={true}\n            // if you're using CodeVideo to record a video for something like youtube, captions may not be a good idea\n            // if you're exporting a video to your own site, captions might be really nice!\n            // for this example we assume the youtube use case\n            withCaptions={true}\n            actionFinishedCallback={goToNextAction}\n            // this example has audios! see codevideo-backend-engine, command: `npm run generate-audio-manifest <your actions json or ts file here> elevenlabs`\n            speakActionAudios={audioItems}\n            fileExplorerWidth={400}\n            terminalHeight={250}\n            mouseColor=\"black\"\n            fontSizePx={20}\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["audioItems","actions","Puppeteer","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","userInteracted","setUserInteracted","useEffect","interactionEvents","handleInteraction","forEach","event","document","addEventListener","once","removeEventListener","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","theme","project","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","currentLessonIndex","isSoundOn","withCaptions","actionFinishedCallback","nextIndex","length","window","__onActionProgress","currentAction","totalActions","progress","toFixed","actionName","_actions$nextIndex","name","actionValue","_actions$nextIndex2","value","timestamp","Date","now","toLocaleString","_actions","_actions2","speakActionAudios","fileExplorerWidth","terminalHeight","mouseColor","fontSizePx"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-index-tsx-98992f8b8f12534c14cc.js","mappings":"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","sources":["webpack://codevideo-ide-react-examples/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { GUIMode, IAction, Project, IAudioItem } from \"@fullstackcraftllc/codevideo-types\"\n// actual package import\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\n// local import from src below - doesn't seem to work because of relative path issues\n// import { CodeVideoIDE } from \"../../../src/CodeVideoIDE\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\nconst audios: Array<IAudioItem> = []\nconst speakActionAudios =  [];\n\nconst actions: Array<IAction> = [\n  {\n    \"name\": \"author-speak-before\",\n    \"value\": \"This tutorial will show you how to generate PDFs from markdown using our docsascode generator tool. We'll create a markdown file, then a doc.yml file, and then run the generator.\"\n  },\n  {\n    \"name\": \"file-explorer-create-file\",\n    \"value\": \"hello-world.md\"\n  },\n  {\n    \"name\": \"file-explorer-open-file\",\n    \"value\": \"hello-world.md\"\n  },\n  {\n    \"name\": \"author-speak-during\",\n    \"value\": \"First, let's create a markdown file with some sample content. Notice we can use any valid markdown: headings, code blocks, and more!\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"# Hello World\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"This is a test of the `docsascode` generator.\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"Any standard markdown should work, including:\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"## Subtitles\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"### Subsubtitles\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"Inline `code` and **inline bold** text.\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"Code snippets:\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"```python\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"print(\\\"Hello World\\\")\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"```\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"and so on...\"\n  },\n  {\n    \"name\": \"editor-save\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"author-speak-during\",\n    \"value\": \"Now let's create a doc.yml configuration file. This tells pandoc how to generate our PDF.\"\n  },\n  {\n    \"name\": \"file-explorer-create-file\",\n    \"value\": \"doc.yml\"\n  },\n  {\n    \"name\": \"file-explorer-open-file\",\n    \"value\": \"doc.yml\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"variables:\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"  title:  'My First Docsascode Generator PDF'\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"  subtitle: 'Courtesy Solve Innovation'\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"to: pdf\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"output-file: ./hello-world.pdf\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"2\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"input-files:\"\n  },\n  {\n    \"name\": \"editor-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"editor-type\",\n    \"value\": \"- hello-world.md\"\n  },\n  {\n    \"name\": \"editor-save\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"author-speak-during\",\n    \"value\": \"Perfect! This config sets the title, specifies PDF output, and points to our markdown file.\"\n  },\n  {\n    \"name\": \"terminal-open\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"author-speak-during\",\n    \"value\": \"Finally, let's run the generator using Docker. We'll mount our current directory and run the docsascode container.\"\n  },\n  {\n    \"name\": \"terminal-type\",\n    \"value\": \"docker run --rm --volume \\\"$(pwd):/data\\\" -w /data/ registry.solve.ch/solve/documentation-tools/docsascode-generator:latest --defaults doc.yml\"\n  },\n  {\n    \"name\": \"terminal-enter\",\n    \"value\": \"1\"\n  },\n  {\n    \"name\": \"terminal-set-output\",\n    \"value\": \"Processing document...\\n[LaTeX] Compiling PDF...\\n[LaTeX] Processing markdown content...\\n[LaTeX] Applying eisvogel template...\\n[LaTeX] Document compilation successful!\\nPDF generated: hello-world.pdf\"\n  },\n  {\n    \"name\": \"file-explorer-create-file\",\n    \"value\": \"hello-world.pdf\"\n  },\n  {\n    \"name\": \"author-speak-after\",\n    \"value\": \"Excellent! You've now generated a professional PDF from markdown. The docker flags ensure clean execution, file access, and proper cleanup.\"\n  }\n]\n\n// TODO: actually none of these other strings affect the project... so?????\nconst project: Project = {\n  id: '',\n  name: '',\n  description: '',\n  primaryLanguage: '',\n  lessons: [\n    {\n      id: '',\n      name: '',\n      description: '',\n      actions: actions\n    }\n  ]\n};\n\n// same as step for now - probably should become more universal example\nexport default function Home() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n\n  // on mount, ensure that currentActionIndex is set to 0\n  useEffect(() => {\n    setCurrentActionIndex(0)\n    setMode('step')\n  }, [])\n\n  // on mount, setup event listeners for left and right arrow keys - to navigate between actions\n  useEffect(() => {\n    if (mode !== 'step') {\n      return\n    }\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowRight' && currentActionIndex < actions.length - 1) {\n        console.log('going to next action')\n        setCurrentActionIndex(currentActionIndex + 1)\n      } else if (e.key === 'ArrowLeft' && currentActionIndex > 0) {\n        console.log('going to previous action')\n        setCurrentActionIndex(currentActionIndex - 1)\n      } else if (e.key === ' ') {\n        console.log('replaying mode active')\n        // reset actions to 0 and set mode to replay\n        setCurrentActionIndex(0)\n        setMode('replay')\n      }\n    }\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [mode, currentActionIndex])\n\n\n\n  const goToNextAction = () => {\n    if (currentActionIndex < actions.length - 1) {\n      setCurrentActionIndex(currentActionIndex + 1)\n    }\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            theme='dark'\n            project={project}\n            mode={mode}\n            allowFocusInEditor={false} // so arrow keys work for navigation, not for typing\n            defaultLanguage={'python'}\n            isExternalBrowserStepUrl={null}\n            currentActionIndex={currentActionIndex}\n            currentLessonIndex={0}\n            isSoundOn={true}\n            withCaptions={true}\n            actionFinishedCallback={goToNextAction}\n            speakActionAudios={speakActionAudios}\n            fileExplorerWidth={400}\n            terminalHeight={250}\n            mouseColor=\"black\" \n            playBackCompleteCallback={() => {}}\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["speakActionAudios","actions","project","id","name","description","primaryLanguage","lessons","Home","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","useEffect","handleKeyDown","e","key","length","console","log","window","addEventListener","removeEventListener","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","theme","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","currentLessonIndex","isSoundOn","withCaptions","actionFinishedCallback","fileExplorerWidth","terminalHeight","mouseColor","playBackCompleteCallback"],"sourceRoot":""}
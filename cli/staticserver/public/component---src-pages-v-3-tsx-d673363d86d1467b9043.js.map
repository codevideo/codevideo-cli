{"version":3,"file":"component---src-pages-v-3-tsx-d673363d86d1467b9043.js","mappings":"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","sources":["webpack://codevideo-ide-react-examples/./src/pages/v3.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { ICodeVideoIDEProps, GUIMode, IAction, IAudioItem, ICodeVideoManifest, Project, extractActionsFromProject } from \"@fullstackcraftllc/codevideo-types\"\nimport { CodeVideoIDE } from \"@fullstackcraftllc/codevideo-ide-react\"\nimport { Box, Flex, Theme } from \"@radix-ui/themes\";\nimport { useEffect, useState } from \"react\";\n\n// this example is nearly the same as the record example, but with some puppeteer window injections\n// it also loads the manifest from the CodeVideo API running at localhost:7000\n// this is the static page used by the codevideo-cli\nexport default function Puppeteer() {\n  const [mode, setMode] = useState<GUIMode>('step')\n  const [currentActionIndex, setCurrentActionIndex] = useState(0)\n  const [project, setProject] = useState<Project>([])\n  const [actions, setActions] = useState<IAction[]>([])\n  // const [currentLessonIndex, setCurrentLessonIndex] = useState<number | null>(null)\n  const [currentLessonIndex, setCurrentLessonIndex] = useState<number | null>(null)\n  const [audioItems, setAudioItems] = useState<Array<IAudioItem>>([])\n  const [isSoundOn, setIsSoundOn] = useState<boolean>(false)\n  const [monacoLoaded, setMonacoLoaded] = useState<boolean>(false)\n\n  // CodeVideoIDE props state with defaults\n  const [ideProps, setIdeProps] = useState<ICodeVideoIDEProps>({\n    project: [],\n    mode: 'step',\n    currentLessonIndex: 0,\n    currentActionIndex: 0,\n    isSoundOn: false,\n    actionFinishedCallback: () => {},\n    speakActionAudios: [],\n    theme: 'dark',\n    allowFocusInEditor: true,\n    defaultLanguage: 'python',\n    isExternalBrowserStepUrl: null,\n    withCaptions: true,\n    fileExplorerWidth: 400,\n    terminalHeight: 350,\n    mouseColor: \"black\",\n    fontSizePx: 26,\n    keyboardTypingPauseMs: 40,\n    standardPauseMs: 200,\n    longPauseMs: 200,\n    resolution: '1080p',\n    showDevBox: false,\n  })\n\n  // on user interaction, set mode to 'replay' and reset the current action index\n  const [readyToReplay, setReadyToReplay] = useState(false)\n\n  // Expose the __startRecording function globally.\n  // also log any error or unhandled rejection to the console\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      console.error(\"This code is intended to run in a browser environment.\");\n      return;\n    }\n    \n    (window as any).__startRecording = () => {\n      console.log(\"[__startRecording] Recording triggered programmatically!\");\n      console.log(\"[__startRecording] Current state:\", {\n        project: Array.isArray(project) ? `actions array (${project.length})` : typeof project,\n        actions: actions.length,\n        currentLessonIndex,\n        monacoLoaded,\n        readyToReplay\n      });\n      setReadyToReplay(true);\n    };\n\n    (window as any).addEventListener('error', (event) => {\n        console.error('Global error caught:', JSON.stringify({\n            message: event.message,\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno,\n            error: event.error?.stack\n        }));\n    });\n\n    (window as any).addEventListener('unhandledrejection', (event) => {\n        console.error('Unhandled promise rejection:', JSON.stringify(event));\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"[V3 useEffect] readyToReplay:\", readyToReplay, \"monacoLoaded:\", monacoLoaded);\n    console.log(\"[V3 useEffect] project:\", project);\n    console.log(\"[V3 useEffect] actions length:\", actions.length);\n    console.log(\"[V3 useEffect] currentLessonIndex:\", currentLessonIndex);\n    \n    if (readyToReplay && monacoLoaded) {\n      // Extra validation before starting replay\n      if (!project || (Array.isArray(project) && project.length === 0)) {\n        console.error(\"[V3 useEffect] Project is not loaded yet, cannot start replay!\");\n        console.error(\"[V3 useEffect] Project value:\", project);\n        return;\n      }\n      \n      if (actions.length === 0) {\n        console.error(\"[V3 useEffect] No actions available, cannot start replay!\");\n        console.error(\"[V3 useEffect] Actions:\", actions);\n        return;\n      }\n      \n      console.log('[V3 useEffect] Starting replay...')\n      console.log('[V3 useEffect] Project type:', Array.isArray(project) ? 'actions array' : typeof project);\n      console.log('[V3 useEffect] First few actions:', actions.slice(0, 3).map(a => ({ name: a.name, value: a.value?.substring(0, 50) + '...' })));\n      \n      setCurrentActionIndex(0)\n      setMode('replay')\n      setIsSoundOn(true)\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: currentActionIndex,\n          totalActions: actions.length,\n          progress: 0,\n          actionName: actions[currentActionIndex]?.name || `Action ${currentActionIndex}`,\n          actionValue: actions[currentActionIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    }\n  }, [readyToReplay, monacoLoaded, project, actions])\n\n  // gets manifest from the CodeVideo API running at localhost:7000\n  const getManifest = async (uuid: string) => {\n    try {\n      console.log(\"[getManifest] Fetching manifest for UUID:\", uuid);\n      const response = await fetch(`http://localhost:7000/get-manifest-v3?uuid=${uuid}`)\n      const data: ICodeVideoManifest = await response.json()\n      console.log(\"\\n-------------------\\n\\n\\nMANIFEST DATA:\\n\", JSON.stringify(data, null, 2), \"\\n\\n-------------------\\n\")\n\n      // if data.actions is defined, set the actions\n      let project: Project | undefined\n      let lessonIndex: number | null = null\n      if (data && data.actions) {\n        project = data.actions\n        lessonIndex = null // When project is actions array, use null\n        console.log(`[getManifest] FOUND ${data.actions.length} actions in manifest`)\n        console.log(`[getManifest] First action:`, JSON.stringify(data.actions[0]));\n        console.log(`[getManifest] Last action:`, JSON.stringify(data.actions[data.actions.length - 1]));\n        setActions(data.actions)\n        console.log('[getManifest] Setting project to actions array, currentLessonIndex should be null')\n      } else if (data.lesson) {\n        project = data.lesson\n        lessonIndex = null // When project is a single lesson, use null (not 0)\n        console.log(`[getManifest] FOUND ${data.lesson.actions.length} actions in lesson`)\n        console.log(`[getManifest] Lesson structure:`, JSON.stringify(Object.keys(data.lesson)));\n        console.log(`[getManifest] First lesson action:`, JSON.stringify(data.lesson.actions[0]));\n        setActions(data.lesson.actions)\n        console.log('[getManifest] Setting project to lesson object, currentLessonIndex should be null')\n      } else {\n        console.error(\"[getManifest] No actions or lesson found in manifest data!\");\n        console.error(\"[getManifest] Data keys:\", Object.keys(data || {}));\n      }\n      \n      console.log(\"[getManifest] About to set project and actions\");\n      console.log(\"[getManifest] Project type:\", Array.isArray(project) ? 'array' : typeof project);\n      console.log(\"[getManifest] Lesson index:\", lessonIndex);\n      \n      setProject(project || [])\n      setCurrentLessonIndex(lessonIndex)\n      setAudioItems(data.audioItems)\n\n      // Apply codeVideoIDEProps from manifest if they exist\n      if (data.codeVideoIDEProps) {\n        console.log(\"[getManifest] Applying IDE props from manifest:\", data.codeVideoIDEProps);\n        setIdeProps(prevProps => ({\n          ...prevProps,\n          ...data.codeVideoIDEProps\n        }))\n      }\n      \n      console.log(\"[getManifest] Manifest processing complete\");\n    } catch (error) {\n      console.error(\"Error getting manifest: \", JSON.stringify(error));\n    }\n  }\n\n  // on mount, load uuid from \"uuid\" property in the url\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const uuid = urlParams.get('uuid')\n    console.log(\"[V3 Mount] URL params:\", Object.fromEntries(urlParams.entries()));\n    if (uuid) {\n      console.log(\"[V3 Mount] Retrieving manifest for uuid: \", uuid)\n      getManifest(uuid)\n    } else {\n      console.log(\"[V3 Mount] No UUID found in URL parameters\");\n    }\n  }, [])\n\n  // Track state changes\n  useEffect(() => {\n    console.log(\"[V3 State] project changed:\", Array.isArray(project) ? `actions array (${project.length})` : typeof project);\n  }, [project]);\n\n  useEffect(() => {\n    console.log(\"[V3 State] actions changed:\", actions.length);\n  }, [actions]);\n\n  useEffect(() => {\n    console.log(\"[V3 State] currentLessonIndex changed:\", currentLessonIndex);\n  }, [currentLessonIndex]);\n\n  useEffect(() => {\n    console.log(\"[V3 State] mode changed:\", mode);\n  }, [mode]);\n\n  useEffect(() => {\n    console.log(\"[V3 State] currentActionIndex changed:\", currentActionIndex);\n  }, [currentActionIndex]);\n\n  // NOTE HERE: to continue to the next action in replay mode, you need to implementation a function for the actionFinishedCallback prop\n  const goToNextAction = () => {\n    console.log(\"[goToNextAction] Going to next action...\")\n    console.log(\"[goToNextAction] Current index:\", currentActionIndex, \"Total actions:\", actions.length);\n    const nextIndex = currentActionIndex + 1\n    if (nextIndex < actions.length) {\n      console.log(\"[goToNextAction] Moving to action\", nextIndex, \":\", actions[nextIndex]?.name);\n      // Send progress update - see scripts/make-video-from-record-page.js\n      if (typeof (window as any).__onActionProgress === 'function') {\n        (window as any).__onActionProgress({\n          currentAction: nextIndex,\n          totalActions: actions.length,\n          progress: (nextIndex / actions.length * 100).toFixed(1),\n          actionName: actions[nextIndex]?.name || `Action ${nextIndex}`,\n          actionValue: actions[nextIndex]?.value || '',\n          timestamp: Date.now().toLocaleString()\n        });\n      }\n    } else {\n      console.log(\"[goToNextAction] Reached end of actions, next index would be:\", nextIndex);\n    }\n    setCurrentActionIndex(nextIndex)\n  }\n\n  // when the video is complete, you need may want to implement a function for the playBackCompleteCallback prop\n  const playBackCompleteCallback = () => {\n    console.log(\"[playBackCompleteCallback] Playback complete!\")\n    console.log(\"[playBackCompleteCallback] Final action index:\", currentActionIndex);\n    console.log(\"[playBackCompleteCallback] Total actions:\", actions.length);\n    // Send final progress update (the one with 100%) only once when the final action is reached this is actually when nextIndex === actions.length\n    if (typeof (window as any).__onActionProgress === 'function') {\n      (window as any).__onActionProgress({\n        currentAction: actions.length,\n        totalActions: actions.length,\n        progress: \"100.0\",\n        actionName: actions[actions.length - 1]?.name || `Action ${actions.length}`,\n        actionValue: actions[actions.length - 1]?.value || '',\n        timestamp: Date.now().toLocaleString()\n      });\n    }\n  }\n\n  // Note the codevideoIDE must be rendered within a radix <Theme/> scope to render properly\n  \n  // Log project data just before rendering with proper serialization\n  console.log(\"[V3 Render] About to render CodeVideoIDE with:\");\n  console.log(\"[V3 Render] - project type:\", Array.isArray(project) ? `array[${project.length}]` : typeof project);\n  console.log(\"[V3 Render] - actions length:\", actions.length);\n  console.log(\"[V3 Render] - mode:\", mode);\n  console.log(\"[V3 Render] - currentActionIndex:\", currentActionIndex);\n  console.log(\"[V3 Render] - currentLessonIndex:\", currentLessonIndex);\n  \n  // Log actual project structure to debug\n  if (project) {\n    if (Array.isArray(project)) {\n      console.log(\"[V3 Render] - project is actions array with length:\", project.length);\n      console.log(\"[V3 Render] - first 3 actions:\", JSON.stringify(project.slice(0, 3), null, 2));\n    } else {\n      console.log(\"[V3 Render] - project keys:\", JSON.stringify(Object.keys(project)));\n      if ('actions' in project) {\n        console.log(\"[V3 Render] - project.actions length:\", project.actions?.length || 0);\n      }\n    }\n  }\n  \n  return (\n    <Theme\n      accentColor=\"mint\"\n      appearance=\"dark\"\n      panelBackground=\"translucent\"\n      radius=\"large\"\n    >\n      <Flex direction=\"column\" justify=\"center\" align=\"center\">\n        <Box\n          style={{\n            height: '100vh',\n            width: '100vw',\n          }}\n        >\n          <CodeVideoIDE\n            {...ideProps}\n            // should be project, but something seems broken - just use the actions for now\n            project={project}\n            // should be currentLessonIndex, but something seems broken\n            currentLessonIndex={0}\n            mode={mode}\n            currentActionIndex={currentActionIndex}\n            isSoundOn={isSoundOn}\n            actionFinishedCallback={goToNextAction}\n            playBackCompleteCallback={playBackCompleteCallback}\n            // this example has audios! see codevideo-backend-engine, command: `npm run generate-audio-manifest <your actions json or ts file here> elevenlabs`\n            speakActionAudios={audioItems}\n            monacoLoadedCallback={() => setMonacoLoaded(true)}\n            showDevBox={false} // set to 'true' to show a small dev box in the bottom left corner of the video\n          />\n        </Box>\n      </Flex>\n    </Theme>\n  )\n}\n"],"names":["Puppeteer","mode","setMode","useState","currentActionIndex","setCurrentActionIndex","project","setProject","actions","setActions","currentLessonIndex","setCurrentLessonIndex","audioItems","setAudioItems","isSoundOn","setIsSoundOn","monacoLoaded","setMonacoLoaded","ideProps","setIdeProps","actionFinishedCallback","speakActionAudios","theme","allowFocusInEditor","defaultLanguage","isExternalBrowserStepUrl","withCaptions","fileExplorerWidth","terminalHeight","mouseColor","fontSizePx","keyboardTypingPauseMs","standardPauseMs","longPauseMs","resolution","showDevBox","readyToReplay","setReadyToReplay","useEffect","window","__startRecording","console","log","Array","isArray","length","addEventListener","event","error","JSON","stringify","message","filename","lineno","colno","_event$error","stack","slice","map","a","name","value","_a$value","substring","__onActionProgress","currentAction","totalActions","progress","actionName","_actions$currentActio","actionValue","_actions$currentActio2","timestamp","Date","now","toLocaleString","urlParams","URLSearchParams","location","search","uuid","get","Object","fromEntries","entries","async","response","fetch","data","json","lessonIndex","lesson","keys","codeVideoIDEProps","prevProps","getManifest","_project$actions","React","Theme","accentColor","appearance","panelBackground","radius","Flex","direction","justify","align","Box","style","height","width","CodeVideoIDE","nextIndex","_actions$nextIndex","toFixed","_actions$nextIndex2","_actions$nextIndex3","playBackCompleteCallback","_actions","_actions2","monacoLoadedCallback"],"sourceRoot":""}